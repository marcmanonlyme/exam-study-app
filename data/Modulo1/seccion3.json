[
  {
    "question": "¿Qué tipo de prueba se enfoca en verificar que el sistema completo funciona como se espera?",
    "options": ["Prueba de unidad", "Prueba de integración", "Prueba de sistema", "Prueba de regresión"],
    "answer": 2,
    "explanation": "La prueba de sistema valida el comportamiento del software como un todo, incluyendo todos los componentes integrados."
  },
  {
    "question": "¿Qué tipo de mantenimiento se realiza para corregir errores detectados en el software?",
    "options": ["Perfectivo", "Adaptativo", "Correctivo", "Preventivo"],
    "answer": 2,
    "explanation": "El mantenimiento correctivo se aplica para solucionar fallos o errores que afectan el funcionamiento del sistema."
  },
  {
    "question": "¿Qué estructura de datos es más adecuada para implementar una función de deshacer en una aplicación?",
    "options": ["Cola", "Pila", "Lista", "Árbol"],
    "answer": 1,
    "explanation": "La pila permite almacenar acciones en orden LIFO, ideal para funciones de deshacer."
  },
  {
    "question": "¿Qué modelo de desarrollo permite retroalimentación continua y adaptación a cambios frecuentes?",
    "options": ["Cascada", "Ágil", "Prototipos", "Incremental"],
    "answer": 1,
    "explanation": "Ágil se basa en iteraciones cortas, retroalimentación constante y adaptación a cambios."
  },
  {
    "question": "¿Qué principio SOLID establece que los objetos deben depender de abstracciones y no de clases concretas?",
    "options": ["Open/Closed", "Single Responsibility", "Dependency Inversion", "Interface Segregation"],
    "answer": 2,
    "explanation": "La inversión de dependencias promueve el uso de interfaces y abstracciones para reducir el acoplamiento."
  },
  {
    "question": "¿Qué tipo de prueba se realiza para verificar que el sistema cumple con los requisitos del cliente?",
    "options": ["Prueba de sistema", "Prueba de aceptación", "Prueba de integración", "Prueba unitaria"],
    "answer": 1,
    "explanation": "La prueba de aceptación se realiza con el cliente para validar que el sistema cumple con sus expectativas."
  },
  {
    "question": "¿Qué estructura de datos se utiliza para representar expresiones matemáticas en compiladores?",
    "options": ["Lista", "Árbol binario", "Cola", "Pila"],
    "answer": 1,
    "explanation": "Los árboles binarios permiten representar expresiones con operadores y operandos jerárquicamente."
  },
  {
    "question": "¿Qué tipo de mantenimiento busca prevenir errores antes de que ocurran?",
    "options": ["Correctivo", "Perfectivo", "Preventivo", "Adaptativo"],
    "answer": 2,
    "explanation": "El mantenimiento preventivo se realiza para evitar fallos futuros mediante mejoras o revisiones."
  },
  {
    "question": "¿Qué técnica permite definir una interfaz común para múltiples clases con comportamientos distintos?",
    "options": ["Herencia", "Encapsulamiento", "Polimorfismo", "Abstracción"],
    "answer": 2,
    "explanation": "El polimorfismo permite que diferentes clases respondan de manera distinta a la misma interfaz o método."
  },
  {
    "question": "¿Qué norma define los requisitos para la documentación de requisitos de software?",
    "options": ["IEEE 830", "ISO/IEC 12207", "ISO/IEC 25010", "IEEE 1012"],
    "answer": 0,
    "explanation": "La norma IEEE 830 establece cómo documentar los requisitos funcionales y no funcionales del software."
  },
  {
    "question": "¿Qué estructura de datos se usa para implementar algoritmos de recorrido en anchura (BFS)?",
    "options": ["Pila", "Cola", "Árbol", "Lista"],
    "answer": 1,
    "explanation": "El recorrido en anchura (BFS) utiliza una cola para explorar los nodos nivel por nivel."
  },
  {
    "question": "¿Qué tipo de prueba se realiza para verificar que los cambios no afectaron funcionalidades previas?",
    "options": ["Prueba de regresión", "Prueba de aceptación", "Prueba de integración", "Prueba de carga"],
    "answer": 0,
    "explanation": "La prueba de regresión asegura que el software sigue funcionando correctamente después de cambios o correcciones."
  },
  {
    "question": "¿Qué principio SOLID indica que una clase debe tener una sola responsabilidad?",
    "options": ["Open/Closed", "Single Responsibility", "Interface Segregation", "Liskov Substitution"],
    "answer": 1,
    "explanation": "El principio de responsabilidad única establece que una clase debe tener una sola razón para cambiar."
  },
  {
    "question": "¿Qué modelo de desarrollo se basa en construir el sistema por partes funcionales entregables?",
    "options": ["Cascada", "Incremental", "Ágil", "Prototipos"],
    "answer": 1,
    "explanation": "El modelo incremental permite construir el sistema en módulos funcionales que se integran progresivamente."
  },
  {
    "question": "¿Qué tipo de prueba se realiza para verificar el comportamiento del sistema bajo condiciones extremas?",
    "options": ["Prueba de carga", "Prueba de estrés", "Prueba de aceptación", "Prueba de integración"],
    "answer": 1,
    "explanation": "La prueba de estrés evalúa cómo responde el sistema ante condiciones límite o sobrecarga."
  },
  {
    "question": "¿Qué técnica permite definir clases abstractas que no pueden ser instanciadas directamente?",
    "options": ["Herencia", "Encapsulamiento", "Polimorfismo", "Abstracción"],
    "answer": 3,
    "explanation": "La abstracción permite definir clases base con métodos que deben ser implementados por sus subclases."
  },
  {
    "question": "¿Qué estructura de datos se usa para implementar árboles de decisión?",
    "options": ["Lista", "Árbol binario", "Cola", "Pila"],
    "answer": 1,
    "explanation": "Los árboles binarios permiten representar decisiones con condiciones y resultados en cada nodo."
  },
  {
    "question": "¿Qué tipo de mantenimiento se realiza para mejorar el rendimiento sin cambiar la funcionalidad?",
    "options": ["Correctivo", "Perfectivo", "Preventivo", "Adaptativo"],
    "answer": 1,
    "explanation": "El mantenimiento perfectivo busca optimizar el sistema sin alterar sus funciones."
  },
  {
    "question": "¿Qué norma define características de calidad como fiabilidad, usabilidad y mantenibilidad?",
    "options": ["ISO/IEC 12207", "IEEE 830", "ISO/IEC 25010", "IEEE 1012"],
    "answer": 2,
    "explanation": "La norma ISO/IEC 25010 establece un modelo de calidad para productos software."
  },
  {
    "question": "¿Qué tipo de prueba se realiza para verificar que los módulos interactúan correctamente?",
    "options": ["Prueba de integración", "Prueba de sistema", "Prueba de aceptación", "Prueba de unidad"],
    "answer": 0,
    "explanation": "La prueba de integración valida que los módulos se comuniquen y funcionen correctamente en conjunto."
  }
]
